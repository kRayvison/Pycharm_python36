#!/usr/bin/env python3
# -*- coding: utf-8 -*-


import os,sys,subprocess,string,logging,time,shutil
import glob
import logging
import codecs
import configparser
import json
import gc
import xml.etree.ElementTree as ET
import re

from MayaPlugin import MayaPlugin
from Maya import Maya
from CommonUtil import RBCommon as CLASS_COMMON_UTIL
from MayaUtil import RBMayaUtil as CLASS_MAYA_UTIL

       

class AnalyzeMaya(Maya):
    def __init__(self,**paramDict):
        Maya.__init__(self,**paramDict)
        self.format_log('AnalyzeMaya.init','start')
        for key,value in self.__dict__.items():
            self.G_DEBUG_LOG.info(key+'='+str(value))
        self.format_log('done','end')        
        self.G_CUSTOM_CONFIG_NAME ='CustomConfig.py'
        self.CG_VERSION =self.G_CG_CONFIG_DICT['cg_version']
    
    
    def RB_CONFIG(self):
        self.G_DEBUG_LOG.info('[Maya.RBconfig.start.....]')
        print("----------------------------------------loading plugins start ------------------------------------------")
        #kill maya       
        CLASS_MAYA_UTIL.killMayabatch(self.G_DEBUG_LOG)  #kill mayabatch.exe
        # ----------------load maya plugin-------------------
        os.environ['MAYA_DISABLE_CIP'] = '1' 
        os.environ['MAYA_DISABLE_CLIC_IPM'] = '1' 
        os.environ['MAYA_DISABLE_CER'] = '1' 
        
        self.G_DEBUG_LOG.info('插件配置')
        if self.G_CG_CONFIG_DICT:           
            sys.stdout.flush()
            custom_config=os.path.join(self.G_NODE_MAYAFUNCTION,self.G_CUSTOM_CONFIG_NAME).replace('\\','/') 
            if self.G_NODE_MAYAFUNCTION:                 
                if os.path.exists(custom_config): 
                    sys.stdout.flush()
                    print("custom_config is: " + custom_config )               
                    sys.stdout.flush()
                else:
                    print("Can not find the CustomConfig file: %s." % custom_config)
            print("plugin path:")
            print(self.G_CG_CONFIG_DICT)
            sys.stdout.flush()
            maya_plugin=MayaPlugin(self.G_CG_CONFIG_DICT,[custom_config],self.G_USER_ID,self.G_TASK_ID,self.G_DEBUG_LOG)
            maya_plugin.config()           
            sys.stdout.flush()      
        print("----------------------------------------loading plugins end ------------------------------------------")
        self.G_DEBUG_LOG.info('[Maya.RBconfig.end.....]')
        
    def RB_RENDER(self):
        self.G_DEBUG_LOG.info('[max.RBanalyse.start.....]')        
        # renderSoftware = self.G_CG_CONFIG_DICT['cg_name']
        # softwareVer = self.G_CG_CONFIG_DICT['cg_version']
        # softvareVer_all  = renderSoftware + softwareVer       

        mayaExePath=os.path.join('C:/Program Files/Autodesk',self.G_CG_VERSION,'bin/mayapy.exe')
        if self.G_RENDER_OS== '0':
            mayaExePath='/usr/autodesk/'+self.G_CG_VERSION+'-x64/bin/mayapy'
            if not os.path.exists(mayaExePath):
                mayaExePath='/usr/autodesk/'+self.G_CG_VERSION+'/bin/mayapy'     
        mayaExePath=mayaExePath.replace('\\','/')       
        # self.G_NODE_MAYASCRIPT=os.path.normpath(os.path.join(self.G_NODE_PY,'CG/Maya/script'))        
        self.G_AN_MAYA_FILE=os.path.join(self.G_NODE_MAYASCRIPT,'Analyze.py').replace('\\','/')

        analyze_cmd = "%s %s --ui %s --ti %s --proj %s --cgfile %s --cgversion %s --taskjson %s --assetjson %s --tipsjson %s" %(mayaExePath,self.G_AN_MAYA_FILE,self.G_USER_ID,self.G_TASK_ID,self.G_INPUT_PROJECT_PATH,self.G_INPUT_CG_FILE,self.CG_VERSION,self.G_TASK_JSON,self.G_ASSET_JSON,self.G_TIPS_JSON)
        # print analyze_cmd        
        # self.G_KAFKA_MESSAGE_BODY_DICT['startTime']=str(int(time.time()))
        self.G_FEE_PARSER.set('render','start_time',str(int(time.time())))
        self.G_DEBUG_LOG.info("\n\n-------------------------------------------Start maya program-------------------------------------\n\n")
        analyze_cmd = analyze_cmd.encode(sys.getfilesystemencoding())
        print (analyze_cmd)
        CLASS_COMMON_UTIL.cmd(analyze_cmd,my_log=self.G_DEBUG_LOG)      
        CLASS_MAYA_UTIL.kill_lic_all(my_log=self.G_DEBUG_LOG)        
        # self.G_KAFKA_MESSAGE_BODY_DICT['endTime']=str(int(time.time())) 
        self.G_FEE_PARSER.set('render','end_time',str(int(time.time())))    
        self.G_DEBUG_LOG.info('[maya.RBanalyse.end.....]')
        
        
       
        
    # def RB_HAN_RESULT(self):#7
        # self.format_log('.结果处理...','start')
        # self.G_DEBUG_LOG.info('[AnalyzeMaya.RB_HAN_RESULT.start.....]')    
        
        # if self.G_ACTION in ['Analyze']:
            # task_json_name='task.json'
            # asset_json_name='asset.json'
            # tips_json_name='tips.json'
            # node_task_json = os.path.join(self.G_WORK_RENDER_TASK_CFG,task_json_name)
            # node_asset_json = os.path.join(self.G_WORK_RENDER_TASK_CFG,asset_json_name)
            # node_tips_json = os.path.join(self.G_WORK_RENDER_TASK_CFG,tips_json_name)          
            
            # scene_info_dict=self.han_task_json(node_task_json)
            # asset_json_dict=self.han_asset_json(node_asset_json)
            # self.han_tips_json(node_tips_json,scene_info_dict,asset_json_dict)            
            
            # if not os.path.exists(node_task_json):
                # CLASS_COMMON_UTIL.error_exit_log(self.G_DEBUG_LOG,'Analyze  file failed . task.json not exists')
                
            # self.copy_cfg_to_server(node_task_json,node_asset_json,node_tips_json)
        # else:
            # self.result_action()

        # self.G_DEBUG_LOG.info('[AnalyzeMaya.RB_HAN_RESULT.end.....]')
        # self.format_log('done','end')        
        

        
        
        
        
        
 